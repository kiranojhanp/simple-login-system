{"version":3,"sources":["UserContext.js","screen/LoginScreen.js","screen/SignupScreen.js","screen/DashboardScreen.js","components/PrivateRoute.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserContext","createContext","users","localStorage","getItem","JSON","parse","id","full_name","email","password","avatar","UserProvider","props","useState","userList","setUserList","Provider","value","children","LoginSchema","yup","shape","required","min","max","matches","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","margin","secondary","main","form","width","submit","Login","history","useHistory","classes","useContext","React","showPassword","values","setValues","handleClickShowPassword","handleMouseDownPassword","Container","component","maxWidth","CssBaseline","className","Typography","variant","initialValues","validationSchema","onSubmit","ValidUser","filter","user","console","log","isValid","Object","keys","length","setValue","setItem","stringify","push","checkUser","errors","handleChange","handleBlur","touched","Grid","container","item","xs","TextField","error","fullWidth","onChange","onBlur","label","name","autoComplete","autoFocus","helperText","type","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","Button","color","Link","href","SignupSchema","firstName","lastName","confirmPassword","oneOf","Signup","data","Math","random","toString","substring","handleSubmit","sm","root","minHeight","marginBottom","media","height","paddingTop","footer","padding","grey","logout","Dashboard","userData","gutterBottom","CardMedia","image","title","removeItem","PrivateRoute","isLoggedIn","Component","rest","getUserInfo","userInfo","render","to","pathname","state","from","location","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f743d41.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\n\nexport const UserContext = createContext();\n\nconst userData = [\n  {\n    id: 1,\n    full_name: \"Kiran Ojha\",\n    email: \"kiran@gmail.com\",\n    password: \"123456789abc\",\n    avatar: \"https://i.imgur.com/uKlMTbx.jpg\",\n  },\n  {\n    id: 2,\n    full_name: \"Kamal Ojha\",\n    email: \"kamal@gmail.com\",\n    password: \"123456789abc\",\n    avatar: \"https://i.imgur.com/uKlMTbx.jpg\",\n  },\n];\n\nvar users = localStorage.getItem(\"userList\")\n  ? JSON.parse(localStorage.getItem(\"userList\"))\n  : userData;\n\nexport const UserProvider = (props) => {\n  const [userList, setUserList] = useState(users);\n  return (\n    <UserContext.Provider value={[userList, setUserList]}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { UserContext } from \"../UserContext\";\n\nimport { Formik, Form } from \"formik\";\nimport * as yup from \"yup\";\n\nlet LoginSchema = yup.object().shape({\n  email: yup.string().email().required(\"This field is required.\"),\n  password: yup\n    .string()\n    .min(8, \"Password is too short - should be 8 chars minimum.\")\n    .max(20, \"Password is too long - should be less than 20 characters.\")\n    .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\n    .required(\"This field is required.\"),\n});\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const Login = () => {\n  const history = useHistory();\n\n  const classes = useStyles();\n  const [userList, setUserList] = useContext(UserContext);\n\n  const [values, setValues] = React.useState({\n    showPassword: false,\n  });\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = () =>\n    setValues({ ...values, showPassword: !values.showPassword });\n\n  const checkUser = (values) => {\n    const ValidUser = userList.filter(\n      (user) => user.email === values.email && user.password === values.password\n    );\n\n    console.log(ValidUser)\n\n    const isValid = Object.keys(ValidUser).length !== 0;\n    if (!isValid) {\n      history.push(\"/\");\n    } else {\n      const setValue = { ...ValidUser[0], isValid };\n      localStorage.setItem(\"userInfo\", JSON.stringify(setValue));\n      history.push(\"/dashboard\");\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Login\n        </Typography>\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n          }}\n          validationSchema={LoginSchema}\n          onSubmit={(values) => {\n            checkUser(values);\n          }}\n        >\n          {({ errors, handleChange, handleBlur, touched }) => (\n            <Form className={classes.form}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    error={errors.email && touched.email}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    autoFocus\n                    helperText={\n                      errors.email && touched.email ? errors.email : null\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    error={errors.password && touched.password}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    name=\"password\"\n                    label=\"Password\"\n                    type={values.showPassword ? \"text\" : \"password\"}\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                          >\n                            {values.showPassword ? (\n                              <Visibility />\n                            ) : (\n                              <VisibilityOff />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                    helperText={\n                      errors.password && touched.password\n                        ? errors.password\n                        : null\n                    }\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n              >\n                Login\n              </Button>\n\n              <Grid container>\n                <Grid item xs></Grid>\n                <Grid item>\n                  <Link href=\"/signup\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </Container>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { UserContext } from \"../UserContext\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\n\nimport { Formik, Form } from \"formik\";\nimport * as yup from \"yup\";\n\nlet SignupSchema = yup.object().shape({\n  firstName: yup\n    .string()\n    .matches(/^[A-Za-z ]*$/, \"Please enter valid name\")\n    .required(\"This field is required.\"),\n  lastName: yup\n    .string()\n    .matches(/^[A-Za-z ]*$/, \"Please enter valid name\")\n    .required(\"This field is required.\"),\n  email: yup.string().email().required(\"This field is required.\"),\n  password: yup\n    .string()\n    .min(8, \"Password is too short - should be 8 chars minimum.\")\n    .max(20, \"Password is too long - should be less than 20 characters.\")\n    .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\n    .required(\"This field is required.\"),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n    .min(8, \"Password is too short - should be 8 chars minimum.\")\n    .max(20, \"Password is too long - should be less than 20 characters.\")\n    .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\n    .required(\"This field is required.\"),\n});\n\nconst useStyles = makeStyles((theme) => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const Signup = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  var [userList, setUserList] = useContext(UserContext);\n\n  const [values, setValues] = React.useState({\n    showPassword: false,\n  });\n\n  const handleSubmit = (values) => {\n    const data = {\n      id: Math.random().toString(36).substring(7),\n      full_name: values.firstName + \" \" + values.lastName,\n      email: values.email,\n      password: values.password,\n      avatar: \"https://i.imgur.com/uKlMTbx.jpg\",\n    };\n\n    userList = [...userList, data];\n    localStorage.setItem(\"userList\", JSON.stringify(userList));\n    history.push(\"/\");\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = () =>\n    setValues({ ...values, showPassword: !values.showPassword });\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values) => {\n            handleSubmit(values);\n          }}\n        >\n          {({ errors, handleChange, handleBlur, touched }) => (\n            <Form className={classes.form}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    error={errors.firstName && touched.firstName}\n                    autoComplete=\"fname\"\n                    name=\"firstName\"\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    id=\"firstName\"\n                    label=\"First Name\"\n                    autoFocus\n                    helperText={\n                      errors.firstName && touched.firstName\n                        ? errors.firstName\n                        : null\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    error={errors.lastName && touched.lastName}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    id=\"lastName\"\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    autoComplete=\"lname\"\n                    helperText={\n                      errors.lastName && touched.lastName\n                        ? errors.lastName\n                        : null\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    error={errors.email && touched.email}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    helperText={\n                      errors.email && touched.email ? errors.email : null\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    error={errors.password && touched.password}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    name=\"password\"\n                    label=\"Password\"\n                    type={values.showPassword ? \"text\" : \"password\"}\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                          >\n                            {values.showPassword ? (\n                              <Visibility />\n                            ) : (\n                              <VisibilityOff />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                    helperText={\n                      errors.password && touched.password\n                        ? errors.password\n                        : null\n                    }\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <TextField\n                    error={errors.confirmPassword && touched.confirmPassword}\n                    variant=\"outlined\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    name=\"confirmPassword\"\n                    label=\"Confirm Password\"\n                    type={values.showPassword ? \"text\" : \"password\"}\n                    id=\"confirmPassword\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                          >\n                            {values.showPassword ? (\n                              <Visibility />\n                            ) : (\n                              <VisibilityOff />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                    helperText={\n                      errors.confirmPassword && touched.confirmPassword\n                        ? errors.confirmPassword\n                        : null\n                    }\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n              >\n                Sign Up\n              </Button>\n\n              <Grid container>\n                <Grid item xs></Grid>\n                <Grid item>\n                  <Link href=\"/\" variant=\"body2\">\n                    {\"Have an account? Log in\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: \"auto\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[200]\n        : theme.palette.grey[800],\n  },\n  logout: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const Dashboard = () => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const userData = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n  const logout = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Welcome {userData.full_name}\n        </Typography>\n        <Typography variant=\"body1\">Your email is {userData.email}</Typography>\n        <CardMedia\n          className={classes.media}\n          image={userData.avatar}\n          title={userData.full_name}\n        />\n\n      </Container>\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Button\n            type=\"submit\"\n            onClick={logout}\n            fullWidth\n            variant=\"contained\"\n            color=\"success\"\n            className={classes.logout}\n          >\n            Logout\n          </Button>\n        </Container>\n      </footer>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  let isLoggedIn;\n  const getUserInfo = localStorage.getItem(\"userInfo\");\n  let userInfo = JSON.parse(getUserInfo);\n\n  console.log(userInfo);\n\n  //   if (Object.keys(userInfo).length !== 0) {\n  //     isLoggedIn = false;\n  //   } else {\n  // }\n\n  isLoggedIn = !getUserInfo ? false : userInfo.isValid;\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport { Login } from \"./screen/LoginScreen\";\nimport { Signup } from \"./screen/SignupScreen\";\nimport { Dashboard } from \"./screen/DashboardScreen\";\n\nimport PrivateRoute from \"./components/PrivateRoute.js\";\n\n\nimport { UserProvider } from \"./UserContext\";\n\nfunction App() {\n  return (\n    <UserProvider>\n      <div className=\"App\">\n        {/* <Navbar /> */}\n        <div className=\"App-header\">\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/\" component={Login} exact />\n              <Route path=\"/signup\" component={Signup} />\n              <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n              <h1>Error 404</h1>\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}